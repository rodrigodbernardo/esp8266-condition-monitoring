#include <iostream>
#include <math.h>       /* pow */
#include <vector>

using namespace std;

int main()
{

  int MPU_data[100][3] = {
  {2414,8408,6950},
{-2744,9488,13996},
{-468,-4678,11944},
{4632,14606,11440},
{-1140,9120,15492},
{-5384,-3520,19752},
{-1972,-15352,17118},
{4320,5140,8266},
{-6132,-716,7448},
{-6128,-7356,16196},
{308,1726,7534},
{10578,7366,-6430},
{-286,-988,-4798},
{-4482,-1166,5332},
{7700,-19802,-5754},
{5968,-4280,-3870},
{7146,10490,-912},
{-1604,8058,3194},
{102,-9880,10094},
{10934,13922,1048},
{1436,4496,6280},
{-4292,-3244,15252},
{-7148,-8674,27278},
{6258,1962,7922},
{-7356,614,13854},
{-12952,5498,29518},
{1010,6530,12496},
{6168,-1760,-4172},
{5390,-1432,-6116},
{-3442,-3076,5788},
{9528,-22462,-8668},
{2728,4530,3712},
{9272,8988,-4806},
{-1088,224,-3254},
{-1682,-5448,10492},
{11138,-6972,-10004},
{6212,-5572,-4272},
{-1242,1462,11818},
{-7414,2918,25624},
{3256,-498,10190},
{-5606,11424,20994},
{-8048,12472,27858},
{-3488,392,20724},
{1940,-15158,5530},
{4290,2760,3130},
{-5036,-778,4106},
{4366,-18664,-588},
{3382,-1388,86},
{7708,-580,-4218},
{3790,-1240,-5248},
{-4736,-2084,8268},
{11824,-20210,-13630},
{8214,-10016,-7274},
{4038,7692,4810},
{-2302,9642,12564},
{-756,-7324,12354},
{5544,19304,10880},
{-1046,8820,13826},
{-5040,-4680,17512},
{-3348,-15556,19920},
{5072,4858,6808},
{-5484,-598,7594},
{-9134,-3032,20692},
{1366,4674,8030},
{2252,-13522,4438},
{4344,2004,1612},
{-3532,-926,3424},
{3558,-18510,816},
{5082,-912,-1934},
{8030,11818,-2746},
{-2740,5590,1132},
{552,-7450,8966},
{11732,4682,-4914},
{2966,-630,734},
{4392,7514,4394},
{-8840,-3784,28936},
{5916,4244,8738},
{-8774,3884,18848},
{-12318,8682,31146},
{-320,3254,17074},
{3566,-6266,308},
{4822,6810,6894},
{-5512,-3092,5920},
{-5142,-9552,14920},
{680,4336,8738},
{9106,6430,-6358},
{216,2186,-5228},
{-3270,-2570,9718},
{12412,-13564,-13726},
{6480,-9992,-5968},
{660,2642,10692},
{-5788,6388,23032},
{656,-3488,11698},
{-942,15090,17384},
{2620,48,3070},
{-4050,-2872,19834},
{-6448,-4882,26352},
{3782,3998,6078},
{-8720,4146,17132},
{-11958,6422,28424},
};

  int window_size = 9;
  int window_border = 4;
  int n_sensors = 3;
  int n_capt = 100;
  double rms = 0;
  
  double MSD[n_capt - (2*window_border)][n_sensors];

  for (int axis = 0; axis < n_sensors; axis++){
    printf("\n\nSensor %i\n\n", axis);
    // Calcula o MSD

    for (int centralElement = window_border; centralElement < n_capt - window_border; centralElement++)
	{
      // 1. Media
          
      double msd_mean = 0;
      for (int i = (centralElement - window_border); i <= centralElement + window_border; i++)
      {
        msd_mean += (MPU_data[i][axis]);
      }
      msd_mean /= window_size;
        
      // 2. Variancia
      
      double msd_variance = 0;
      
      for (int i = (centralElement - window_border); i <= centralElement + window_border; i++){
        msd_variance += pow((MPU_data[i][axis] - msd_mean),2);
      }
    
      msd_variance /= window_size-1;    
      MSD[centralElement - window_border][axis] = sqrt(msd_variance);
    }
  }
  
  /*
  printf("\n");
  for(int i = 0; i < n_capt - (2*window_border); i++)
  {
  	printf("%i\t",i+1);
  	for (int j = 0; j < n_sensors;j++)
	  {
	  	printf("%f\t\t",MSD[i][j]);
	  }
	  printf("\n");
  }
  */
  
  double media[3] = {0,0,0};

  for (int position = 0; position < (n_capt - (2 * window_border)); position++)
  {
    for (int axis = 0; axis < n_sensors; axis++)
    	media[axis] += (MSD[position][axis]);
  }
  
  for (int axis = 0; axis < n_sensors; axis++){
  	media[axis] /= (n_capt - (2 * window_border));
  	printf("\nmedia = %f",media[axis]);
  }

  for(int axis = 0; axis < n_sensors; axis++)
    rms += pow(media[axis],2);

  rms = sqrt(rms/3);
  printf("\nRMS final = %f",rms);
}